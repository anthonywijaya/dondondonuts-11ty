---
layout: default
eleventyImport:
  collections: ["flavors", "specials"]
eleventyExcludeFromCollections: true
---


<!-- Snow effect -->
<div class="absolute inset-0 h-[200vh] pointer-events-none" x-data="snowfall()">
  <template x-for="snowflake in snowflakes" :key="snowflake.id">
    <div 
      class="absolute text-dondonblue animate-fall"
      x-bind:style="`left: ${snowflake.x}%; animation-delay: -${snowflake.delay}s; animation-duration: ${snowflake.duration}s`"
    >
      ‚ùÑ
    </div>
  </template>
</div>

<div class="mx-auto w-full max-w-7xl lg:px-8">
  <div class="relative px-4 sm:px-6 lg:px-12">
    <div class="mx-auto max-w-2xl lg:max-w-5xl">
      <!-- Logo -->
      <div class="text-center mb-4">
        <a href="/">
          <img class="w-1/5 mx-auto" src="/assets/img/logo-illust-text.png" alt="Don Don Donuts Logo">
        </a>
      </div>


         <!-- Speech Bubble -->
  <div class="absolute top-20 left-1/2 transform translate-x-1/2 -translate-y-full">
    <div class="relative">
      <div class="bg-red-600 text-dondonwhite px-4 py-8 rounded-full shadow-lg max-w-[120px] min-h-[4rem] flex items-center" 
       style="display: flex;">
    <div class="whitespace-normal break-words text-center text-xs">
          <span class="inline-block animate-text-reveal" style="--letter-index: 0">C</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 1">h</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 2">r</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 3">i</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 4">s</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 5">t</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 6">m</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 7">a</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 8">s</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 9"> </span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 10">i</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 11">s</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 12"> </span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 13">c</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 14">o</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 15">m</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 16">i</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 17">n</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 18">g</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 19">!</span>
          <span class="inline-block animate-text-reveal" style="--letter-index: 20">üéÑ</span>
        </div>
      </div>
      <!-- Left-pointing triangle -->
      <div class="absolute left-2 top-1/2 transform -translate-x-1/2 -translate-y-1/2">
        <div 
          class="w-8 h-8 bg-red-600 transform rotate-90"
          style="clip-path: polygon(0% 50%, 100% 0%, 100% 100%);"
        ></div>
      </div>
          </div>
        </div>


      <!-- Back to Homepage link -->
      <a href="/" class="inline-block mb-6 text-dondonblue hover:text-dondonorange transition duration-300">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 inline-block mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Homepage
      </a>

      <div class="flex justify-between items-center mb-8">
        <h1 class="text-3xl font-bold">Place Your Order</h1>
        <a href="https://wa.me/6281519231874" target="_blank" 
           @click="trackNeedHelp()"
           class="bg-dondonorange hover:bg-dondonorange-dark text-dondonwhite font-bold py-2 px-4 rounded inline-flex items-center">
          <svg class="fill-current w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
            <path fill="white" d="M380.9 97.1C339 55.1 283.2 32 223.9 32c-122.4 0-222 99.6-222 222 0 39.1 10.2 77.3 29.6 111L0 480l117.7-30.9c32.4 17.7 68.9 27 106.1 27h.1c122.3 0 224.1-99.6 224.1-222 0-59.3-25.2-115-67.1-157zm-157 341.6c-33.2 0-65.7-8.9-94-25.7l-6.7-4-69.8 18.3L72 359.2l-4.4-7c-18.5-29.4-28.2-63.3-28.2-98.2 0-101.7 82.8-184.5 184.6-184.5 49.3 0 95.6 19.2 130.4 54.1 34.8 34.9 56.2 81.2 56.1 130.5 0 101.8-84.9 184.6-186.6 184.6zm101.2-138.2c-5.5-2.8-32.8-16.2-37.9-18-5.1-1.9-8.8-2.8-12.5 2.8-3.7 5.6-14.3 18-17.6 21.8-3.2 3.7-6.5 4.2-12 1.4-32.6-16.3-54-29.1-75.5-66-5.7-9.8 5.7-9.1 16.3-30.3 1.8-3.7.9-6.9-.5-9.7-1.4-2.8-12.5-30.1-17.1-41.2-4.5-10.8-9.1-9.3-12.5-9.5-3.2-.2-6.9-.2-10.6-.2-3.7 0-9.7 1.4-14.8 6.9-5.1 5.6-19.4 19-19.4 46.3 0 27.3 19.9 53.7 22.6 57.4 2.8 3.7 39.1 59.7 94.8 83.8 35.2 15.2 49 16.5 66.6 13.9 10.7-1.6 32.8-13.4 37.4-26.4 4.6-13 4.6-24.1 3.2-26.4-1.3-2.5-5-3.9-10.5-6.6z"/>
          </svg>
          Got Questions? Contact us by WhatsApp
        </a>
      </div>

      <!-- Add Compact Pickup Information Section -->
      <div class="bg-dondonorange rounded-lg shadow-md p-4 mb-6 text-sm">
        <h2 class="text-lg font-bold text-dondonwhite mb-2">Pickup Information</h2>
        <p class="mb-2 text-dondonwhite"><strong>Langkah Order:</strong> Pesan (Pilih Tanggal)-> Kami Goreng Fresh di Tanggal Yang Anda Pilih -> Tinggal Pickup di hari H! (Grab/Gosend)</p>
        <div class="text-dondonwhite flex flex-wrap gap-x-4">
          <p><strong>Waktu Pickup:</strong> 13:00 - 21:00</p>
          <p><strong>Lokasi:</strong> Lilikoi Kitchen, Sunter 
            <a href="https://www.google.com/maps/place/Lilikoi+Kitchen+Restaurant/@-6.1375074,106.8697614,15z/data=!4m2!3m1!1s0x0:0xef5ee5315157ad79?sa=X&ved=1t:2428&ictx=111" 
               target="_blank" 
               rel="noopener noreferrer" 
               class="text-dondonwhite underline hover:text-dondonorange-dark">
              (Map)
            </a>
          </p>
        </div>
      </div>

      <form x-data="orderForm()" x-cloak @submit.prevent="submitForm" class="space-y-6">
        <!-- Customer Information -->
        <div class="bg-dondonwhite-dark rounded-lg shadow-md p-6 space-y-6 mb-8">
          <h2 class="text-2xl font-bold text-dondonblue mb-4">Customer Information</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="receiverName" class="block text-sm font-medium text-dondonblue mb-1">Nama Lengkap (Nama Penerima)</label>
              <input type="text" id="receiverName" x-model="receiverName" required 
                     @focus="trackFormStart();"
                     class="w-full px-4 py-2 border border-dondonorange-light rounded-md shadow-sm focus:ring-2 focus:ring-dondonorange focus:border-transparent">
            </div>
            <div>
              <label for="deliveryDate" class="block text-sm font-medium text-dondonblue mb-1">Tanggal Pengiriman</label>
              
              
              <div class="relative">
                <input type="text" id="deliveryDate" x-model="deliveryDate" required 
                       x-ref="datepicker"
                       class="w-full px-4 py-2 border border-dondonorange-light rounded-md shadow-sm focus:ring-2 focus:ring-dondonorange focus:border-transparent appearance-none"
                       :class="{'border-dondonorange-dark': deliveryDateError}"
                       placeholder="Select date">
                       
                <div class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none">
                  <svg class="h-5 w-5 text-dondonorange-light" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd" />
                  </svg>
                  
                </div>
                
              </div>
              <div class="mt-2 flex space-x-2">
                <span class="text-xs bg-dondonorange p-2 text-dondonwhite flex-1 text-center">24 Dec: <span class="line-through">Full</span></span>
                {# <span class="text-xs bg-dondonorange p-2 text-dondonwhite flex-1 text-center">21 Dec: <span class="line-through">Full</span></span> #}
                {# <span class="text-xs bg-dondonorange p-2 text-dondonwhite flex-1 text-center">3 Nov: <span class="line-through">Full</span></span> #}
                <span x-text="getNextAvailableDate(1)" class="text-xs bg-dondonorange p-2 text-dondonwhite flex-1 text-center"></span>
                <span x-text="getNextAvailableDate(2)" class="text-xs bg-dondonorange p-2 text-dondonwhite flex-1 text-center"></span>
              </div>
              <p x-show="deliveryDateError" class="mt-1 text-sm text-dondonorange-dark" x-text="deliveryDateError"></p>
            </div>
            
          </div>

          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label for="phoneNumber" class="block text-sm font-medium text-dondonblue mb-1">Phone Number</label>
              <div class="relative">
                <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <svg class="h-5 w-5 text-dondonorange-light" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M22 16.92v3a2 2 0 0 1-2.18 2 19.79 19.79 0 0 1-8.63-3.07 19.5 19.5 0 0 1-6-6 19.79 19.79 0 0 1-3.07-8.67A2 2 0 0 1 4.11 2h3a2 2 0 0 1 2 1.72 12.84 12.84 0 0 0 .7 2.81 2 2 0 0 1-.45 2.11L8.09 9.91a16 16 0 0 0 6 6l1.27-1.27a2 2 0 0 1 2.11-.45 12.84 12.84 0 0 0 2.81.7A2 2 0 0 1 22 16.92z"></path>
                  </svg>
                </div>
                <input type="tel" id="phoneNumber" x-model="phoneNumber" 
                      @input="validatePhoneNumber" 
                      :class="{'border-dondonorange-dark': phoneNumberError}"
                      required 
                      class="w-full pl-10 pr-4 py-2 border border-dondonorange-light rounded-md shadow-sm focus:ring-2 focus:ring-dondonorange focus:border-transparent">
              </div>
              <p x-show="phoneNumberError" class="mt-1 text-sm text-dondonorange-dark" x-text="phoneNumberError"></p>
            </div>
            <div>
              <label for="notes" class="block text-sm font-medium text-dondonblue mb-1">Notes</label>
              <textarea id="notes" x-model="notes" rows="3"
                        class="w-full px-4 py-2 border border-dondonorange-light rounded-md shadow-sm focus:ring-2 focus:ring-dondonorange focus:border-transparent"></textarea>
            </div>
          </div>
        </div>

        <!-- Flavors -->
        <div class="space-y-6">
          <h2 class="text-3xl font-bold mt-8">Our Donuts</h2>
          <div class="text-center pt-16 pb-12 relative">
            <h2 class="text-5xl font-bold text-red-700 mb-4">
              üéÑ Christmas Collection üéÑ
            </h2>
            <p class="text-xl text-dondonblue max-w-2xl mx-auto">
              Christmas is coming! Celebrate the season with our special Christmas package! Special Box, Ribbon, and Christmas Tags included!
            </p>
          </div>
          <ul class="grid grid-cols-1 lg:grid-cols-3 gap-4 lg:gap-8">
            {% for flavor in collections.specials %}
              <li class="">
                <div class="group h-full bg-white/90 backdrop-blur-md rounded-2xl overflow-hidden shadow-xl hover:shadow-2xl transition-all duration-500 border border-red-100">
                  <div class="flex lg:block">
                    <!-- Image container -->
                    <div class="relative w-1/3 lg:w-full aspect-w-4 overflow-hidden">
                      <img 
                        class="object-cover w-full h-full transform transition-transform duration-700 group-hover:scale-110" 
                        src="{{ flavor.data.thumb }}" 
                        alt="{{ flavor.data.title }} - Christmas Special Donut"
                      >
                    </div>
                    
                    <!-- Content container -->
                    <div class="w-2/3 lg:w-full p-3 lg:p-6">
                      <h3 class="text-lg lg:text-2xl font-bold text-red-700 mb-1 lg:mb-3">{{ flavor.data.title }}</h3>
                      <p class="text-xs lg:text-base text-gray-600 mb-2 lg:mb-4">{{ flavor.data.description }}</p>
{# 
                      <!-- Price and Early Bird section -->
                      <div class="flex items-center gap-2 mb-2">
                        <p class="text-xs text-dondonblue line-through">Rp. {{ flavor.data.originalprice | thousandseparator }}</p>
                        <p class="text-xs font-bold text-dondonblue">Early Bird!</p>
                      </div> #}
                      
                      <!-- Price and quantity controls -->
                      <div class="flex flex-col gap-2 lg:flex-row lg:justify-between lg:items-center">
                        <p class="text-sm font-bold text-red-700">Rp. {{ flavor.data.price | thousandseparator }}</p>
                        <div class="flex items-center border border-dondonorange-light rounded-lg overflow-hidden w-min">
                          <button type="button" 
                                  @click="flavors['Christmas Specials'][{{ loop.index0 }}].quantity--"
                                  class="px-2 py-1 bg-dondonwhite-dark text-dondonblue hover:bg-dondonorange-light focus:outline-none focus:ring-2 focus:ring-dondonorange touch-manipulation">
                            -
                          </button>
                          <input type="text" 
                                 x-model.number="flavors['Christmas Specials'][{{ loop.index0 }}].quantity" 
                                 class="w-8 px-1 py-1 text-center text-sm bg-dondonwhite border-none focus:ring-0 focus:outline-none"
                                 inputmode="numeric"
                                 pattern="[0-9]*"
                                 @input="$event.target.value = $event.target.value.replace(/[^0-9]/g, '')">
                          <button type="button" 
                                  @click="flavors['Christmas Specials'][{{ loop.index0 }}].quantity++"
                                  class="px-2 py-1 bg-dondonwhite-dark text-dondonblue hover:bg-dondonorange-light focus:outline-none focus:ring-2 focus:ring-dondonorange touch-manipulation">
                            +
                          </button>
                        </div>
                      </div>

                      <!-- Customization section -->
                      <div x-show="flavors['Christmas Specials'][{{ loop.index0 }}].quantity > 0"
                           x-transition:enter="transition ease-out duration-300"
                           x-transition:enter-start="opacity-0 transform -translate-y-2"
                           x-transition:enter-end="opacity-100 transform translate-y-0"
                           class="mt-3 pt-3 border-t border-red-100">
                        <!-- Package Navigation -->
                        <div class="flex items-center justify-between mb-3" 
                             x-show="flavors['Christmas Specials'][{{ loop.index0 }}].quantity > 1">
                          <button type="button"
                                  @click="flavors['Christmas Specials'][{{ loop.index0 }}].currentPackage = Math.max(1, flavors['Christmas Specials'][{{ loop.index0 }}].currentPackage - 1)"
                                  :class="{'opacity-50 cursor-not-allowed': flavors['Christmas Specials'][{{ loop.index0 }}].currentPackage === 1}"
                                  class="text-red-600 hover:text-red-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                            </svg>
                          </button>
                          <span class="text-sm font-medium text-gray-600">
                            Package <span x-text="Math.max(1, flavors['Christmas Specials'][{{ loop.index0 }}].currentPackage)"></span> of 
                            <span x-text="flavors['Christmas Specials'][{{ loop.index0 }}].quantity"></span>
                          </span>
                          <button type="button"
                                  @click="flavors['Christmas Specials'][{{ loop.index0 }}].currentPackage = Math.min(flavors['Christmas Specials'][{{ loop.index0 }}].quantity, flavors['Christmas Specials'][{{ loop.index0 }}].currentPackage + 1)"
                                  :class="{'opacity-50 cursor-not-allowed': flavors['Christmas Specials'][{{ loop.index0 }}].currentPackage === flavors['Christmas Specials'][{{ loop.index0 }}].quantity}"
                                  class="text-red-600 hover:text-red-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                              <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                            </svg>
                          </button>
                        </div>

                        <div>
                          <label class="block text-sm font-medium text-gray-700 mb-1">To:</label>
                          <input type="text" 
                                 x-model="flavors['Christmas Specials'][{{ loop.index0 }}].customizations[flavors['Christmas Specials'][{{ loop.index0 }}].currentPackage - 1].recipient"
                                 class="w-full px-3 py-2 border border-red-100 rounded-md shadow-sm focus:ring-2 focus:ring-red-500 focus:border-transparent text-sm"
                                 placeholder="Recipient's name">
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </li>
            {% endfor %}
          </ul>
          
          {% for flavorType, flavors in collections.flavors %}
            <h3 class="text-2xl font-semibold mt-8">{{ flavorType }}</h3>
            <ul class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-8 mt-8 mb-16">
              {% for flavor in flavors %}
                {% if flavor.data.visible == "yes" %}
                  <li class="mb-4 flex flex-col">
                    <div class="relative flex-grow">
                      {% if flavor.data.featured %}
                        <div class="absolute top-0 right-1 bg-dondonorange text-dondonwhite px-2 py-1 text-sm font-bold">Best Selling</div>
                      {% endif %}
                      {% if flavor.data.new %}
                        <div class="absolute top-0 left-1 bg-dondonblue text-dondonwhite px-2 py-1 text-sm font-bold">New!</div>
                      {% endif %}
                      <img class="object-cover rounded-xl overflow-hidden w-full" src="{{ flavor.data.thumb }}" alt="{{ flavor.data.title }}">
                      <p class="text-lg font-medium mt-2 mb-1">{{ flavor.data.title }}</p>
                      <p class="text-sm mb-4">Our signature Ubedon‚Ñ¢ {{ flavor.data.description }}</p>
                    </div>
                    <div class="mt-auto">
                      <!-- Price and quantity controls -->
                      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2">
                        <p class="text-sm font-bold">Rp. {{ flavor.data.price | thousandseparator }}</p>
                        
                        <!-- Quantity controls -->
                        <div class="flex items-center border border-dondonorange-light rounded-lg overflow-hidden w-fit">
                          <button type="button" 
                                  @click="flavors['{{ flavorType }}'][{{ loop.index0 }}].quantity = Math.max(0, flavors['{{ flavorType }}'][{{ loop.index0 }}].quantity - 1)"
                                  :disabled="flavors['{{ flavorType }}'][{{ loop.index0 }}].quantity <= 0"
                                  class="px-3 py-1 bg-dondonwhite-dark text-dondonblue hover:bg-dondonorange-light focus:outline-none focus:ring-2 focus:ring-dondonorange touch-manipulation disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-dondonwhite-dark">
                            -
                          </button>
                          <input type="text" 
                                 x-model.number="flavors['{{ flavorType }}'][{{ loop.index0 }}].quantity" 
                                 @input="flavors['{{ flavorType }}'][{{ loop.index0 }}].quantity = Math.max(0, parseInt($event.target.value) || 0)"
                                 class="w-12 px-2 py-1 text-center text-sm bg-dondonwhite border-none focus:ring-0 focus:outline-none"
                                 inputmode="numeric"
                                 pattern="[0-9]*">
                          <button type="button" 
                                  @click="flavors['{{ flavorType }}'][{{ loop.index0 }}].quantity++"
                                  class="px-3 py-1 bg-dondonwhite-dark text-dondonblue hover:bg-dondonorange-light focus:outline-none focus:ring-2 focus:ring-dondonorange touch-manipulation">
                            +
                          </button>
                        </div>
                      </div>
                    </div>
                  </li>
                {% elif flavor.data.visible == "no" %}
                  <li class="mb-4 flex flex-col opacity-60">
                    <div class="relative flex-grow">
                      <!-- Sold Out Badge -->
                      <div class="absolute top-2 right-2 bg-dondonblue text-dondonwhite px-2 py-1 text-sm font-bold rounded-md z-10 shadow-md">
                        Sold Out
                      </div>
                      
                      <img class="object-cover rounded-xl overflow-hidden w-full grayscale" src="{{ flavor.data.thumb }}" alt="{{ flavor.data.title }}">
                      <p class="text-lg font-medium mt-2 mb-1">{{ flavor.data.title }}</p>
                      <p class="text-sm mb-4">Our signature Ubedon‚Ñ¢ {{ flavor.data.description }}</p>
                    </div>
                    <div class="mt-auto">
                      <!-- Price and quantity controls (disabled) -->
                      <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2">
                        <p class="text-sm font-bold">Rp. {{ flavor.data.price | thousandseparator }}</p>
                        
                        <!-- Disabled quantity controls -->
                        <div class="flex items-center border border-gray-300 rounded-lg overflow-hidden w-fit">
                          <button type="button" 
                                  disabled
                                  class="px-3 py-1 bg-gray-100 text-gray-400 cursor-not-allowed">
                            -
                          </button>
                          <input type="text" 
                                 disabled
                                 value="0"
                                 class="w-12 px-2 py-1 text-center text-sm bg-gray-50 border-none cursor-not-allowed"
                                 inputmode="numeric">
                          <button type="button" 
                                  disabled
                                  class="px-3 py-1 bg-gray-100 text-gray-400 cursor-not-allowed">
                            +
                          </button>
                        </div>
                      </div>
                    </div>
                  </li>
                {% endif %}
              {% endfor %}
            </ul>
          {% endfor %}
        </div>

        <!-- Reset Button -->
        <div class="mt-8 mb-4 text-right">
          <button type="button" @click="confirmReset" class="bg-dondonorange-light text-dondonwhite py-2 px-4 rounded-md hover:bg-dondonorange transition duration-300 text-sm font-semibold">
            Reset Order
          </button>
        </div>

        <!-- Birthday Topper Option -->
        <div class="mt-8 bg-dondonwhite-dark rounded-lg shadow-md p-6">
          <div class="flex items-center space-x-4">
            <input type="checkbox" id="birthdayTopper" x-model="birthdayTopper" class="h-5 w-5 text-dondonorange focus:ring-dondonorange border-dondonorange-light rounded">
            <label for="birthdayTopper" class="flex-grow">
              <span class="text-lg font-semibold text-dondonblue">Birthday/Anniversary Additionals</span>
              <span class="block text-sm text-dondonblue-light">Add a candle, ribbons, a card and more for a special celebration!</span>
            </label>
            <span class="text-dondonorange font-semibold">Rp. 15,000</span>
          </div>
          <div class="flex items-center mt-4">
            <img src="/assets/img/birthday-topper-all.jpg" alt="Birthday Topper" class="w-24 h-24 object-cover rounded-lg shadow-md mr-4">
            <p class="text-sm ml-4 text-dondonblue-light">Includes a candle, ribbons, 2 butterfly toppers, and a card with your message to make your Ubedon‚Ñ¢ order extra special!</p>
          </div>
          <!-- Birthday Card Message -->
          <div x-show="birthdayTopper" class="mt-4">
            <label for="birthdayCardMessage" class="block text-sm font-medium text-dondonblue mb-1">Birthday/Anniversary Card Message</label>
            <textarea id="birthdayCardMessage" x-model="birthdayCardMessage" rows="2"
                      class="w-full px-4 py-2 border border-dondonorange-light rounded-md shadow-sm focus:ring-2 focus:ring-dondonorange focus:border-transparent"
                      placeholder="Enter the message you'd like on the birthday card"></textarea>
          </div>
        </div>

        <!-- Total Price -->
        <div id="orderSummary" class="mt-8 bg-dondonwhite-dark rounded-lg shadow-md p-6 space-y-4">
          <h3 class="text-2xl font-bold text-dondonblue mb-4">Order Summary</h3>
          
          <div x-show="getTotalQuantity() > 0" class="mb-4 border-b border-dondonorange-light pb-4 bg-dondonwhite rounded-md p-3">
            <ul class="space-y-1 text-xs">
              <template x-for="item in getSortedItems()" :key="item.name">
                <li class="flex justify-between items-center">
                  <span x-text="`${item.name}`" class="text-dondonblue"></span>
                  <span x-text="`${item.quantity} x Rp. ${item.price.toLocaleString('en-US')}`" class="text-dondonblue"></span>
                </li>
              </template>
            </ul>
          </div>
          
          <div class="flex justify-between items-center py-2 border-b border-dondonorange-light">
            <span class="text-dondonblue">Total Quantity:</span>
            <span class="text-xl font-semibold" x-text="getTotalQuantity()"></span>
          </div>
          
          <div class="flex justify-between items-center py-2 border-b border-dondonorange-light">
            <span class="text-dondonblue">Subtotal:</span>
            <span class="text-xl font-semibold">Rp. <span x-text="getSubtotal().toLocaleString('en-US')"></span></span>
          </div>
          
          <div class="flex justify-between items-center py-2 border-b border-dondonorange-light">
            <span class="text-dondonblue">Discount:</span>
            <span class="text-xl font-semibold" :class="{'text-dondonorange': getDiscount() > 0}">
              - Rp. <span x-text="getDiscount().toLocaleString('en-US')"></span>
            </span>
          </div>
          
          <!-- Add Birthday Topper to the order summary if selected -->
          <div x-show="birthdayTopper" class="flex justify-between items-center py-2 border-b border-dondonorange-light">
            <span class="text-dondonblue">Birthday Additionals:</span>
            <span class="text-xl font-semibold">Rp. 15,000</span>
          </div>
          
          <!-- Update the Total Price calculation -->
          <div class="flex justify-between items-center py-3 border-b-2 border-dondonorange">
            <span class="text-lg font-bold text-dondonorange">Total Price:</span>
            <span class="text-2xl font-bold text-dondonorange">Rp. <span x-text="getTotalPrice().toLocaleString('en-US')"></span></span>
          </div>

          <div x-show="getNextDiscountTier()" 
               x-transition:enter="transition ease-out duration-300"
               x-transition:enter-start="opacity-0 transform scale-90"
               x-transition:enter-end="opacity-100 transform scale-100"
               x-transition:leave="transition ease-in duration-300"
               x-transition:leave-start="opacity-100 transform scale-100"
               x-transition:leave-end="opacity-0 transform scale-90"
               :class="{
                 'bg-dondonwhite text-dondonblue': !getNextDiscountTier().hasReachedTier && !getNextDiscountTier().isFirstTier,
                 'bg-dondonorange text-dondonwhite': getNextDiscountTier().hasReachedTier,
                 'bg-dondonwhite text-dondonblue': getNextDiscountTier().isFirstTier
               }"
               class="mt-4 p-4 rounded-md shadow-sm relative overflow-hidden">
            <div x-show="getNextDiscountTier().hasReachedTier" 
                 class="absolute inset-0 bg-dondonorange"></div>
            <div class="relative z-10">
              <p class="text-base font-semibold mb-2" x-text="
                getNextDiscountTier().isFirstTier
                  ? `üöÄ Buy ${getNextDiscountTier().quantity} more to get your first discount!`
                  : getNextDiscountTier().hasReachedTier
                    ? `üåü Congratulations! You've unlocked a discount!`
                    : `üöÄ You're close to the next discount tier!`
              "></p>
              <p class="text-sm" x-text="
                getNextDiscountTier().isFirstTier
                  ? `Get Rp. ${getNextDiscountTier().nextDiscount.toLocaleString('en-US')} off your order!`
                  : getNextDiscountTier().hasReachedTier
                    ? `You're saving Rp. ${getNextDiscountTier().currentDiscount.toLocaleString('en-US')}!${getNextDiscountTier().nextDiscount > 0 ? ` Add ${getNextDiscountTier().quantity} more to save an additional Rp. ${getNextDiscountTier().nextDiscount.toLocaleString('en-US')}!` : ''}`
                  : `Add ${getNextDiscountTier().quantity} more to get Rp. ${getNextDiscountTier().nextDiscount.toLocaleString('en-US')} off!`
              "></p>
            </div>
            <div x-show="getNextDiscountTier().hasReachedTier" 
                 class="absolute top-0 right-0 mt-2 mr-2 animate-bounce">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-dondonorange" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
        </div>

        <!-- Floating Order Summary Bar -->
        <div x-data="{ showFloatingBar: true }"
             x-init="window.addEventListener('scroll', () => {
               const orderSummary = document.getElementById('orderSummary');
               const rect = orderSummary.getBoundingClientRect();
               showFloatingBar = rect.top > window.innerHeight;
             })"
             x-show="showFloatingBar"
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform translate-y-full"
             x-transition:enter-end="opacity-100 transform translate-y-0"
             x-transition:leave="transition ease-in duration-300"
             x-transition:leave-start="opacity-100 transform translate-y-0"
             x-transition:leave-end="opacity-0 transform translate-y-full"
             class="fixed bottom-0 left-0 right-0 bg-dondonwhite bg-opacity-95 border-t border-dondonorange-light shadow-md p-4 z-50">
          <div class="max-w-7xl mx-auto flex justify-between items-center">
            <div class="flex items-center space-x-4">
              <span class="text-sm font-medium">Total Items: <span x-text="getTotalQuantity()" class="font-bold"></span></span>
              <span class="text-sm font-medium">Total: <span x-text="`Rp. ${getTotalPrice().toLocaleString('en-US')}`" class="font-bold"></span></span>
              <span x-show="getDiscount() > 0" class="text-sm font-medium text-dondonorange">Discount: <span x-text="`Rp. ${getDiscount().toLocaleString('en-US')}`" class="font-bold"></span></span>
            </div>
            <div x-show="getNextDiscountTier()" class="text-sm">
              <span x-show="!getNextDiscountTier().hasReachedTier" x-text="`Add ${getNextDiscountTier().quantity} more for Rp. ${getNextDiscountTier().discount.toLocaleString('en-US')} off!`" class="text-dondonorange-dark"></span>
              <span x-show="getNextDiscountTier().hasReachedTier" x-text="`You're saving Rp. ${getNextDiscountTier().currentDiscount.toLocaleString('en-US')}! Add ${getNextDiscountTier().quantity} more to save an additional Rp. ${getNextDiscountTier().nextDiscount.toLocaleString('en-US')}!`" class="text-dondonorange"></span>
            </div>
          </div>
        </div>

        <!-- Submit Button -->
        <button type="submit" 
          class="w-full bg-dondonorange text-dondonwhite py-3 px-4 rounded-md hover:bg-dondonorange-dark transition duration-300 mt-6 text-lg font-semibold"
          onclick="gtag('event', 'place_order', { 'event_category': 'Order', 'event_label': 'Place Order via WhatsApp' });">
          Place Order via WhatsApp
        </button>


          <!-- Manual Contact Instructions -->
          <div class="mt-6" x-data="{ showManualInstructions: false }">
            <button type="button"
                    @click="showManualInstructions = !showManualInstructions"
                    class="w-full text-center text-sm text-dondonorange hover:text-dondonorange-dark underline">
              Having trouble with WhatsApp? Click here for manual contact instructions.
            </button>

            <div x-show="showManualInstructions"
                 x-transition
                 class="mt-4 bg-white rounded-lg shadow-md p-4 space-y-4">
              <div class="border-b pb-4">
                <h3 class="font-bold text-lg text-dondonblue mb-2">How to Contact Us Manually</h3>
                <ol class="list-decimal list-inside space-y-2 text-sm">
                  <li>Save our WhatsApp number: <span class="font-mono bg-gray-100 px-2 py-1 rounded">+62 815-1923-1874</span></li>
                  <li>Copy your order details using the button below</li>
                  <li>Open WhatsApp and find our contact (Don Don Donuts)</li>
                  <li>Paste and send your order details</li>
                </ol>
              </div>
              

              <!-- Store Profile -->
              <div class="bg-dondonwhite-dark rounded-lg p-4">
                <div class="flex items-center space-x-3 mb-3">
                  <img src="/assets/img/logo-illust-text.png" alt="Don Don Donuts" class="w-12 h-12 object-contain">
                  <div>
                    <h4 class="font-bold text-dondonblue">Don Don Donuts</h4>
                    <p class="text-sm text-gray-600">Premium Ube Donuts</p>
                  </div>
                </div>
                <div class="space-y-2 text-sm">
                  <p class="flex items-center">
                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"/>
                    </svg>
                    +62 815-1923-1874
                  </p>
                  <p class="flex items-center">
                    <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"/>
                    </svg>
                    Lilikoi Kitchen, Sunter
                  </p>
                </div>
              </div>

              <!-- Copy Order Button -->
              <button type="button"
                      @click="async () => {
                          try {
                              const message = generateOrderMessage();
                              await navigator.clipboard.writeText(message);
                              $el.innerText = 'Order Copied!';
                          } catch (error) {
                              console.error('Copy failed:', error);
                              $el.innerText = 'Failed to Copy';
                          } finally {
                              setTimeout(() => {
                                  $el.innerText = 'Copy Order Details';
                              }, 2000);
                          }
                      }"
                      class="w-full bg-dondonblue text-dondonwhite py-2 px-4 rounded hover:bg-dondonblue-dark transition duration-300">
                Copy Order Details
              </button>
            </div>
          </div>
      </form>
    </div>
  </div>
</div>


<script>
function orderForm() {
  return {
    receiverName: '',
    deliveryDate: '',
    phoneNumber: '',
    notes: '',
    flavors: {},
    discounts: {{ discounts | dump | safe }},
    blackoutDates: {{ blackoutdates | dump | safe }},
    phoneNumberError: '',
    deliveryDateError: '',
    birthdayTopper: false,
    birthdayCardMessage: '',
    init() {
      this.initFlavors();
      this.deliveryDate = this.getNextAvailableDate();
      this.$nextTick(() => {
        this.initDatePicker();
      });
    },
    
    confirmReset() {
      if (confirm('Are you sure you want to reset your order? This will remove all selected items.')) {
        this.resetOrder();
      }
    },

    resetOrder() {
      for (let flavorType in this.flavors) {
        this.flavors[flavorType].forEach(flavor => {
          flavor.quantity = 0;
        });
      }
    },
    initFlavors() {
      this.flavors = {
        'Christmas Specials': [],
        // ... existing flavor types ...
      };

      {% for flavor in collections.specials %}
        this.flavors['Christmas Specials'].push({
          name: '{{ flavor.data.title }}',
          price: {{ flavor.data.price | replace(',', '') }},
          quantity: 0,
          currentPackage: 1,
          customizations: [],
          // Watch for quantity changes and update customizations array
          quantityWatcher: function() {
            const quantity = this.quantity;
            // Adjust customizations array length to match quantity
            while (this.customizations.length < quantity) {
              this.customizations.push({ recipient: '' });
            }
            while (this.customizations.length > quantity) {
              this.customizations.pop();
            }
            // Ensure currentPackage is valid
            if (this.currentPackage > quantity) {
              this.currentPackage = quantity;
            }
          }
        });
      {% endfor %}

      // Set up watchers for quantity changes
      this.$nextTick(() => {
        this.flavors['Christmas Specials'].forEach(flavor => {
          this.$watch(() => flavor.quantity, () => flavor.quantityWatcher());
        });
      });

      {% for flavorType, flavors in collections.flavors %}
        this.flavors['{{ flavorType }}'] = [];
        {% for flavor in flavors %}
          {% if flavor.data.visible %}
            this.flavors['{{ flavorType }}'].push({
              name: '{{ flavor.data.title }}',
              price: {{ flavor.data.price | replace(',', '') }},
              quantity: 0,
              recipient: '',
              notes: ''
            });
          {% endif %}
        {% endfor %}
      {% endfor %}
    },
    getDiscount() {
      const totalQuantity = this.getTotalQuantity();
      if (totalQuantity === 0) return 0;
      
      const maxQuantity = Math.max(...Object.keys(this.discounts).map(Number));
      const clampedQuantity = Math.min(totalQuantity, maxQuantity).toString();
      const discountValue = this.discounts[clampedQuantity].discount;
      
      return parseInt(discountValue, 10) || 0;
    },
    getSubtotal() {
      return Object.values(this.flavors).flat().reduce((total, flavor) => total + flavor.price * flavor.quantity, 0);
    },
    getTotalPrice() {
      return this.getSubtotal() - this.getDiscount() + (this.birthdayTopper ? 15000 : 0);
    },
    getTotalQuantity() {
      return Object.values(this.flavors).flat().reduce((total, flavor) => total + flavor.quantity, 0);
    },
    // Helper function to unescape HTML entities (moved outside of submitForm for reuse)
    unescapeHTML(str) {
      const textarea = document.createElement('textarea');
      textarea.innerHTML = str;
      return textarea.value;
    },

    getSortedItems() {
      const items = Object.values(this.flavors).flat().filter(f => f.quantity > 0);
      return items.sort((a, b) => {
        if (a.price !== b.price) {
          return b.price - a.price; // Sort by price descending
        }
        return this.unescapeHTML(a.name).localeCompare(this.unescapeHTML(b.name)); // Then sort alphabetically
      }).map(item => ({
        ...item,
        name: this.unescapeHTML(item.name) // Unescape the name for display
      }));
    },
    getNextDiscountTier() {
      const totalQuantity = this.getTotalQuantity();
      const maxQuantity = Math.max(...Object.keys(this.discounts).map(Number));
      
      if (totalQuantity < 6) {
        const firstTier = this.discounts["6"];
        return {
          quantity: 6 - totalQuantity,
          currentDiscount: 0,
          nextDiscount: parseInt(firstTier.discount, 10),
          isFirstTier: true,
          hasReachedTier: false
        };
      }
      
      const clampedQuantity = Math.min(totalQuantity, maxQuantity).toString();
      const currentTier = this.discounts[clampedQuantity];
      
      if (currentTier.nextTier) {
        const nextTierDiscount = parseInt(this.discounts[currentTier.nextTier.toString()].discount, 10);
        return {
          quantity: parseInt(currentTier.nextTier, 10) - totalQuantity,
          currentDiscount: parseInt(currentTier.discount, 10),
          nextDiscount: nextTierDiscount - parseInt(currentTier.discount, 10),
          isFirstTier: false,
          hasReachedTier: parseInt(currentTier.discount, 10) > 0
        };
      } else {
        // We're at the highest tier
        return {
          quantity: maxQuantity,
          currentDiscount: parseInt(currentTier.discount, 10),
          nextDiscount: 0,
          isFirstTier: false,
          hasReachedTier: true
        };
      }
    },
    validatePhoneNumber() {
      this.phoneNumber = this.phoneNumber.replace(/[^0-9+]/g, '');
      if (this.phoneNumber.length < 6 || this.phoneNumber.length > 15) {
        this.phoneNumberError = 'Please enter a valid phone number (6-15 digits)';
      } else {
        this.phoneNumberError = '';
      }
    },
    getNextAvailableDate(offset = 1) {
      let date = new Date();
      let availableDates = 0;

      while (availableDates < offset) {
        date.setDate(date.getDate() + 1);
        if (!this.isDateDisabled(date)) {
          availableDates++;
        }
      }

      return this.formatDateWithStatus(date, availableDates === 1 ? 'Almost Full' : 'Open');
    },
    isDateDisabled(date) {
      // Ensure we're working with a Date object
      const d = new Date(date);
      const formattedDate = this.formatDateYMD(d);
      if (this.blackoutDates.specificDates.includes(formattedDate)) {
        return true;
      }
      if (this.blackoutDates.recurringDays.includes(d.getDay())) {
        return true;
      }
      return false;
    },

    formatDateYMD(date) {
      // Ensure we're working with a Date object
      const d = new Date(date);
      const year = d.getFullYear();
      const month = String(d.getMonth() + 1).padStart(2, '0');
      const day = String(d.getDate()).padStart(2, '0');
      return `${year}-${month}-${day}`;
    },
    formatDate(date) {
      const options = { day: 'numeric', month: 'long', year: 'numeric' };
      return date.toLocaleDateString('en-US', options);
    },
    formatDateWithStatus(date, status) {
      const day = date.getDate();
      const month = date.toLocaleString('default', { month: 'short' });
      return `${day} ${month}: ${status}`;
    },
    initDatePicker() {
      const datepicker = this.$refs.datepicker;
      flatpickr(datepicker, {
        dateFormat: 'j F Y',
        minDate: 'today',
        defaultDate: this.getNextAvailableDate(),
        disable: [
          (date) => this.isDateDisabled(new Date(date))
        ],
        onChange: (selectedDates, dateStr) => {
          this.deliveryDate = dateStr;
          this.validateDeliveryDate();
        },
        onDayCreate: (dObj, dStr, fp, dayElem) => {
          dayElem.classList.add('rounded-full');
          const date = new Date(dObj);
          const formattedDate = this.formatDateYMD(date);
          if (this.blackoutDates.specificDates.includes(formattedDate) || 
              this.blackoutDates.recurringDays.includes(date.getDay())) {
            dayElem.classList.add('line-through', 'opacity-50');
            console.log('Added line-through to', formattedDate); // Debugging line
          }
        },
        monthSelectorType: 'static'
      });
    },
    validateDeliveryDate() {
      const selectedDate = new Date(this.deliveryDate);
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      tomorrow.setHours(0, 0, 0, 0);

      if (selectedDate < tomorrow) {
        this.deliveryDateError = 'Please select a date from tomorrow onwards';
      } else {
        this.deliveryDateError = '';
      }
    },
    submitForm() {
      this.validatePhoneNumber();
      this.validateDeliveryDate();
      if (this.phoneNumberError || this.deliveryDateError) {
        return; // Don't submit if there are errors
      }

      // Calculate order details for tracking
      const orderDetailsForTracking = {
        total: this.getTotalPrice(),
        items: Object.values(this.flavors).flat().filter(f => f.quantity > 0).map(f => ({
          item_name: f.name,
          quantity: f.quantity,
          price: f.price,
          customizations: f.customizations || null // Include customizations if they exist
        }))
      };

      trackOrderSubmission(orderDetailsForTracking);

      // Generate the message using our updated generateOrderMessage function
      const message = this.generateOrderMessage();
      const encodedMessage = encodeURIComponent(message);
      
      // WhatsApp URLs
      const apiUrl = `https://api.whatsapp.com/send/?phone=6281519231874&text=${encodedMessage}`;
      const waUrl = `https://wa.me/6281519231874?text=${encodedMessage}`;

      // Try to detect mobile devices
      const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

      // Track the order submission
      if (typeof gtag === 'function') {
        gtag('event', 'place_order', {
          'event_category': 'Order',
          'event_label': 'Place Order via WhatsApp',
          'value': this.getTotalPrice()
        });
      }

      // Open WhatsApp
      if (isMobile) {
        // On mobile, try the API URL first
        window.location.href = waUrl;
      } else {
        // On desktop, open in new tab
        window.open(waUrl, '_blank');
      }
    },
    generateOrderMessage() {
      // Get order details for non-Christmas products
      const regularOrders = Object.entries(this.flavors)
        .filter(([type]) => type !== 'Christmas Specials')
        .flatMap(([type, flavors]) => 
          flavors.filter(f => f.quantity > 0)
            .map(f => `${this.unescapeHTML(f.name)}: ${f.quantity}${f.notes ? `\n  Notes: ${f.notes}` : ''}`)
        ).join('\n');

      // Get Christmas Specials details
      const christmasOrders = this.flavors['Christmas Specials']
        .filter(f => f.quantity > 0)
        .map(f => {
          const packageDetails = f.customizations
            .map((custom, index) => `
  Package ${index + 1}:
    To: ${custom.recipient || 'N/A'}`)
            .join('\n');
          
          return `
${this.unescapeHTML(f.name)}: ${f.quantity}
${packageDetails}`;
        })
        .join('\n\n');

      // Calculate totals
      const classicValue = this.flavors['Classic']
        ?.filter(f => f.quantity > 0)
        .reduce((total, f) => total + f.quantity, 0) || 0;

      const premiumValue = this.flavors['Premium']
        ?.filter(f => f.quantity > 0)
        .reduce((total, f) => total + f.quantity, 0) || 0;

      const subtotal = this.getSubtotal();
      const discount = this.getDiscount();
      
      // Build message
      let message = `
Full Name: ${this.receiverName}
Delivery Date: ${this.deliveryDate}
Phone Number: ${this.phoneNumber}
Notes: ${this.notes}

Order Details:
${regularOrders}`;

      if (christmasOrders) {
        message += `\n\nChristmas Packages Details:\n${christmasOrders}`;
      }

      if (this.birthdayTopper) {
        message += `\n\nBirthday/Anniversary Additionals: Yes
Birthday/Anniversary Card Message: ${this.birthdayCardMessage}`;
      }

      message += `\n
Subtotal: Rp. ${subtotal.toLocaleString('en-US')}
Discount: - Rp. ${discount.toLocaleString('en-US')}
${this.birthdayTopper ? `Birthday Topper: Rp. 15,000\n` : ''}
Total Price: Rp. ${this.getTotalPrice().toLocaleString('en-US')}

L${classicValue}U${premiumValue}
Kode Pesanan: (Mohon disertakan saat pickup)
${this.receiverName} ${this.phoneNumber.slice(-4)}`;

      return message.trim();
    }
  };
}

document.addEventListener('alpine:init', () => {
  Alpine.data('orderForm', orderForm);
});
</script>


<script>
  function snowfall() {
    return {
      snowflakes: Array.from({ length: 50 }, (_, i) => ({
        id: i,
        x: Math.random() * 100,
        delay: Math.random() * 16,
        duration: 15 + Math.random() * 20
      }))
    }
  }
</script>

<style>
  @keyframes fall {
    0% {
      transform: translateY(-10vh) rotate(0deg);
      opacity: 1;
    }
    100% {
      transform: translateY(200vh) rotate(360deg);
      opacity: 0.3;
    }
  }

  .animate-fall {
    animation: fall linear infinite;
    animation-duration: 20s;
  }
</style>